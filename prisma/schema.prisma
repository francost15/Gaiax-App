// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  manager
  supervisor
  employee
  intern
  hr // Recursos Humanos
  it // Tecnología de la Información
  sales // Ventas
  marketing // Marketing
  finance // Finanzas
  support // Soporte
  other
}

// Modelo que representa a las empresas que utilizan la plataforma para capacitar a sus empleados.
model Company {
  id           String               @id @default(uuid())
  name         String
  address      String
  phone        String
  // membresia
  membership   Membership           @relation(fields: [membershipId], references: [id])
  membershipId String
  // lista de usuarios
  users        User[]
  // los requerimientos de la empresa
  requirements RequirementCompany[]
}

// Modelo que representa los tipos de membresias que se pueden adquirir
model Membership {
  id          String    @id @default(uuid())
  name        String
  description String
  price       Float
  // limite de usuarios
  limitUsers  Int
  companies   Company[]
}

// Modelo que representa a un usuario de la plataforma
model User {
  id                  String               @id @default(uuid())
  name                String
  lastname            String
  email               String               @unique
  password            String
  streaks             Int
  exp                 Int
  role                String
  image               String?
  // Relación con la empresa
  company             Company              @relation(fields: [companyId], references: [id])
  companyId           String
  // Preferencias de aprendizaje del usuario (nueva tabla)
  learningPreferences LearningPreferences?
  // Resultados de los tests realizados por el usuario
  testResults         TestResult[]
  // Feedback proporcionado por el usuario
  feedbacks           Feedback[]
  // Relación con logros obtenidos
  UserArchivement     UserArchivement[]
  // Progreso en cursos
  UserProgress        UserProgress[]
  // Progreso en lecciones
  UserLessonProgress  UserLessonProgress[]
  Notification        Notification[]
}

// Modelo que almacena las preferencias y estilos de aprendizaje del usuario
model LearningPreferences {
  id                String   @id @default(uuid())
  // Relación uno a uno con el usuario
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @unique
  // Formatos preferidos (texto, audio, video, etc.)
  formats           String[]
  // Estilo de aprendizaje según Kolb
  learningStyleKolb String
  // Tiempo disponible diario para capacitación (en minutos)
  availableTime     Int
  // Metas personales y laborales
  goals             String[]
  // Áreas de fortaleza del usuario
  strengths         String[]
  // Nivel de habilidad técnica autocalificado (1 a 5)
  skillLevel        Int? // Añadido
  // Áreas que el usuario desea mejorar
  improvementAreas  String[]
}

// Modelo que almacena los resultados de los tests realizados por el usuario
model TestResult {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  // Tipo de test (Inicial, Progreso, Evaluación)
  testType  String
  // Respuestas del usuario (almacenadas en formato JSON)
  responses Json
  // Puntuación obtenida (si aplica)
  score     Int?
  // Fecha en que se completó el test
  date      DateTime @default(now())
}

// Modelo que almacena el feedback generado durante el uso de la aplicación
model Feedback {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  // Relación opcional con una lección específica
  lesson       Lesson?  @relation(fields: [lessonId], references: [id])
  lessonId     String?
  // Relación opcional con un curso específico
  course       Course?  @relation(fields: [courseId], references: [id])
  courseId     String?
  // Tipo de feedback (QuizResult, UserComment, SystemGenerated)
  feedbackType String
  // Contenido del feedback (texto, puntuación, etc.)
  content      String
  // Fecha en que se generó el feedback
  date         DateTime @default(now())
}

// Categoria
model Category {
  id           String               @id @default(uuid())
  name         String
  description  String
  // contenido
  contents     Content[]
  // cursos
  courses      Course[]
  // requerimientos
  requirements RequirementCompany[]
}

// Modelo que representa un contenido (puede ser utilizado en lecciones)
model Content {
  id          String   @id @default(uuid())
  title       String
  description String   @default("")
  url         String?
  exp         Int
  type        ContentType
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  lesson      Lesson   @relation(fields: [lessonId], references: [id])
  lessonId    String
}

enum ContentType {
  interactive_text
  flashcards
  quiz
  video
  podcast
  practice
}

// Modelo que representa los requerimientos específicos de una empresa
model RequirementCompany {
  id            String   @id @default(uuid())
  name          String
  description   String
  // Empresa que tiene este requerimiento
  company       Company  @relation(fields: [companyId], references: [id])
  companyId     String
  // Categoría relacionada con el requerimiento
  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    String
  // Habilidades o competencias que la empresa desea que sus empleados desarrollen
  skillsDesired String[]
}

// Logros
model Achievement {
  id          String            @id @default(uuid())
  name        String
  description String
  exp         Int
  // usuarios
  users       UserArchivement[]
}

model UserArchivement {
  id            String      @id @default(uuid())
  // usuario
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  // logro
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  // fecha de obtencion
  date          DateTime
}

// Modelo que representa un curso en la plataforma
model Course {
  id                 String         @id @default(uuid())
  title              String
  description        String
  // URL del curso (opcional)
  url                String?
  exp                Int
  // Categoría a la que pertenece el curso
  category           Category       @relation(fields: [categoryId], references: [id])
  categoryId         String
  // Lecciones que componen el curso
  lessons            Lesson[]
  // Progresos de los usuarios en este curso
  UserProgress       UserProgress[]
  // Objetivos de aprendizaje del curso
  learningObjectives String[]
  Feedback           Feedback[]
  Notification       Notification[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

model Lesson {
  id                 String               @id @default(uuid())
  title              String
  description        String
  // URL de la lección (opcional)
  url                String?
  exp                Int
  // Curso al que pertenece la lección
  course             Course               @relation(fields: [courseId], references: [id])
  courseId           String
  content            Content[]            // Nueva relación con Content
  UserLessonProgress UserLessonProgress[]
  learningObjectives String[]
  Feedback           Feedback[]
  Notification       Notification[]
}

// Modelo que representa el progreso del usuario en una lección
model UserLessonProgress {
  id             String        @id @default(uuid())
  // Usuario que está realizando la lección
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  // Lección en la que está progresando
  lesson         Lesson        @relation(fields: [lessonId], references: [id])
  lessonId       String
  // Indica si la lección ha sido completada
  completed      Boolean       @default(false)
  // Fecha de completación (si aplica)
  completedAt    DateTime?
  // Relación opcional con el progreso del curso
  UserProgress   UserProgress? @relation(fields: [userProgressId], references: [id])
  userProgressId String?
}

// Modelo que representa el progreso del usuario en un curso
model UserProgress {
  id               String               @id @default(uuid())
  // Usuario que está realizando el curso
  user             User                 @relation(fields: [userId], references: [id])
  userId           String
  // Curso en el que está progresando
  course           Course               @relation(fields: [courseId], references: [id])
  courseId         String
  // Porcentaje de progreso en el curso
  progress         Int
  // Lecciones completadas por el usuario en este curso
  lessonsCompleted UserLessonProgress[]
  updatedAt        DateTime             @updatedAt
}

// Modelo que representa las notificaciones en la plataforma
model Notification {
  id               String   @id @default(uuid())
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  title            String
  message          String
  notificationType String // Tipo de notificación (Recordatorio, Logro, Actualización, etc.)
  isRead           Boolean  @default(false) // Indica si el usuario ya vio la notificación
  createdAt        DateTime @default(now())
  // Opcionalmente, puedes relacionar la notificación con otros modelos
  course           Course?  @relation(fields: [courseId], references: [id])
  courseId         String?
  lesson           Lesson?  @relation(fields: [lessonId], references: [id])
  lessonId         String?
}
